{"version":3,"sources":["firebase/api.js","components/Main.jsx","components/PaymentDetails.jsx","index.js"],"names":["axios","create","baseURL","Main","state","creditCardNumber","creditCardNumberValid","creditCardNumberErr","cardHolder","cardHolderValid","cardHolderErr","expMonthDate","expMonthDateValid","expYearDate","expYearDateValid","expireDateValid","expireDateValidErr","securityCode","securityCodeValid","securityCodeErr","amount","amountValid","amountErr","loadingPayment","paymentRefused","paymentApproved","e","cardNumber","target","value","checkCardNumber","split","every","x","match","checkCardNumberLength","length","checkWhiteSpaces","trim","this","setState","cardName","checkCardName","onlyBlankSpaces","checkCardNameLength","expMonth","checkExpMonth","checkExpMonthLength","expYear","checkExpYear","checkExpYearLength","parseFloat","date","Date","getMonth","getYear","getFullYear","getEndOfYear","toString","substring","thisMonth","i","secCode","checkSecCode","checkSecCodeLength","checkAmount","checkAmountLength","validateExpirationData","setTimeout","processPayment","paymentInfo","cardholder","expirationDate","API","post","then","transactionNumber","uuidv4","transNumber","catch","err","console","log","to","pathname","data","className","type","maxLength","onChange","handleCardNumber","handleCardName","onBlur","handleExpMonthDate","handleExpYearDate","handleSecurityCode","handleAmount","onClick","validateInputsBtn","React","Component","PaymentDetails","props","undefined","location","routing","basename","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"2QAGeA,E,OAAAA,EAAMC,OAAO,CAC3BC,QAAS,0C,eCsZKC,G,kNAhZdC,MAAQ,CACLC,iBAAwB,GACxBC,uBAAwB,EACxBC,qBAAwB,EAExBC,WAAwB,GACxBC,iBAAwB,EACxBC,eAAwB,EAExBC,aAAwB,GACxBC,mBAAwB,EAExBC,YAAwB,GACxBC,kBAAwB,EAExBC,iBAAwB,EACxBC,oBAAwB,EAExBC,aAAwB,GACxBC,mBAAwB,EACxBC,iBAAwB,EAExBC,OAAwB,GACxBC,aAAwB,EACxBC,WAAwB,EAExBC,gBAAwB,EACxBC,gBAAwB,EACxBC,iBAAwB,G,+DAOVC,GAChB,IAAIC,EAAwBD,EAAEE,OAAOC,MAE/BC,EAAwBH,EAAWI,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,MAAM,cAEhEC,EAA8C,KAAtBR,EAAWS,OAEnCC,EAAsBV,EAAWW,OAAOF,SAAWT,EAAWS,OAG9DN,GAAmBK,GAAyBE,EAC3CE,KAAKC,SAAS,CAACnC,iBAAkBsB,EAAYrB,uBAAuB,IACtC,IAAtBqB,EAAWS,OAEnBG,KAAKC,SAAS,CAACnC,iBAAkB,GAAIC,uBAAuB,IAE5DiC,KAAKC,SAAS,CAACnC,iBAAkBsB,EAAYrB,uBAAuB,M,qCAI7DoB,GACb,IAAIe,EAAqBf,EAAEE,OAAOC,MAE3Ba,EAAuBD,EAASV,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,MAAM,kBAE7DS,EAAuBF,EAASV,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,MAAM,YAE7DU,EAAsBH,EAASL,QAAU,EAG1CM,GAAiBE,IAAwBD,EACxCJ,KAAKC,SAAS,CAAEhC,WAAYiC,EAAUhC,iBAAiB,IAC7B,IAApBgC,EAASL,OAEfG,KAAKC,SAAS,CAAEhC,WAAY,GAAIC,iBAAiB,IAEjD8B,KAAKC,SAAS,CAAEhC,WAAYiC,EAAUhC,iBAAiB,M,yCAI7CiB,GACjB,IAAImB,EAAkBnB,EAAEE,OAAOC,MAE1BiB,EAAsBD,EAASd,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,MAAM,cAE5Da,EAA0C,IAApBF,EAAST,OAE/BC,EAAsBQ,EAASP,OAAOF,SAAWS,EAAST,OAGzDU,GAAiBC,GAAuBV,EACvCE,KAAKC,SAAS,CAAC7B,aAAckC,EAAUjC,mBAAmB,IAC9B,IAApBiC,EAAST,OAEjBG,KAAKC,SAAS,CAAC7B,aAAc,GAAIE,YAAa,GAAID,mBAAmB,IAErE2B,KAAKC,SAAS,CAAC7B,aAAckC,EAAUjC,mBAAmB,M,wCAKjDc,GACjB,IAAIsB,EAAsBtB,EAAEE,OAAOC,MAE7BoB,EAAsBD,EAAQjB,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,MAAM,cAE3DgB,EAAyC,IAAnBF,EAAQZ,OAE9BC,EAAsBW,EAAQV,OAAOF,SAAWY,EAAQZ,OAGvDa,GAAgBC,GAAsBb,EACrCE,KAAKC,SAAS,CAAC3B,YAAamC,EAASlC,kBAAkB,IAC5B,IAAnBkC,EAAQZ,OAEhBG,KAAKC,SAAS,CAAC3B,YAAa,GAAIF,aAAc,GAAIG,kBAAkB,IAEpEyB,KAAKC,SAAS,CAAC3B,YAAamC,EAASlC,kBAAkB,M,+CAO/D,GAAGyB,KAAKnC,MAAMQ,mBAAqB2B,KAAKnC,MAAMU,iBAAkB,KAEzDH,EAAewC,WAAWZ,KAAKnC,MAAMO,cACvCE,EAAesC,WAAWZ,KAAKnC,MAAMS,aACnCuC,EAAe,IAAIC,KACnBC,EAAeF,EAAKE,WAAa,EACjCC,EAAeH,EAAKI,cACpBC,EAAeN,WAAWI,EAAQG,WAAWC,UAAU,EAAEJ,EAAQnB,SAUlEwB,IAPeC,EAOKP,GANd,KACNO,EAAI,IAAMA,GAELA,GAMPhD,IAAgB4C,GAAgBG,GAAajD,EAC/C4B,KAAKC,SAAS,CAAEzB,iBAAiB,IAG9BF,GAAe,IAAMF,EAAe,GAAKA,GAAgB,GAC3D4B,KAAKC,SAAS,CAAEzB,iBAAiB,IAEjCwB,KAAKC,SAAS,CAAEzB,iBAAiB,IAjBhC,IAAiB8C,I,yCAuBHnC,GAClB,IAAIoC,EAAqBpC,EAAEE,OAAOC,MAE5BkC,EAAqBD,EAAQ/B,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,MAAM,cAE1D8B,EAAwC,IAAnBF,EAAQ1B,OAE7BC,EAAqByB,EAAQxB,OAAOF,SAAW0B,EAAQ1B,OAGtD2B,GAAgBC,GAAsB3B,EACrCE,KAAKC,SAAS,CAACvB,aAAc6C,EAAS5C,mBAAmB,EAAMC,iBAAiB,IACrD,IAAnB2C,EAAQ1B,OAEhBG,KAAKC,SAAS,CAACvB,aAAc,GAAIC,mBAAmB,IAEpDqB,KAAKC,SAAS,CAACvB,aAAc6C,EAAS5C,mBAAmB,M,mCAIrDQ,GACZ,IAAIN,EAAoBM,EAAEE,OAAOC,MAE3BoC,EAAoB7C,EAAOW,MAAM,IAAIC,OAAM,SAAAC,GAAC,OAAIA,EAAEC,MAAM,cAExDgC,EAAoB9C,EAAOgB,OAAS,EAEpCC,EAAoBjB,EAAOkB,OAAOF,SAAWhB,EAAOgB,OAEnD6B,GAAeC,GAAqB7B,EACnCE,KAAKC,SAAS,CAACpB,OAAQA,EAAQC,aAAa,IAClB,IAAlBD,EAAOgB,OAEfG,KAAKC,SAAS,CAACpB,OAAQ,GAAIC,aAAa,IAExCkB,KAAKC,SAAS,CAACpB,OAAQA,EAAQC,aAAa,M,0CAI/B,IAAD,OAGnBkB,KAAK4B,yBAEL5B,KAAKC,SAAS,CAAEjB,gBAAgB,IAEhC6C,YAAW,WAEV,EAAK5B,SAAS,CAAEjB,gBAAgB,EAAOhB,qBAAqB,EAAOG,eAAe,EAAOM,oBAAoB,EAAOG,iBAAiB,EAAOG,WAAW,IAGpJ,EAAKlB,MAAME,sBACV,EAAKF,MAAMK,gBACV,EAAKL,MAAMW,gBACV,EAAKX,MAAMc,kBACV,EAAKd,MAAMiB,YAEb,EAAKgD,iBAEL,EAAK7B,SAAS,CAAElB,WAAW,IAG5B,EAAKkB,SAAS,CAAErB,iBAAiB,IAGlC,EAAKqB,SAAS,CAAExB,oBAAoB,IAGrC,EAAKwB,SAAS,CAAE9B,eAAe,IAGhC,EAAK8B,SAAS,CAAEjC,qBAAqB,MAErC,Q,uCAIe,IAAD,OAGZ+D,EAAc,CACjBjE,iBAAmBkC,KAAKnC,MAAMC,iBAC/BkE,WAAmBhC,KAAKnC,MAAMI,WAC9BgE,eAAmBjC,KAAKnC,MAAMO,aAAa,IAAI4B,KAAKnC,MAAMS,YAC1DI,aAAmBsB,KAAKnC,MAAMa,aAC9BG,OAAmBmB,KAAKnC,MAAMgB,QAK/BqD,EAAIC,KAAK,oBAAqBJ,GAC7BK,MAAK,WAGL,IAAIC,EAAoBC,cAGxBP,EAAYQ,YAAcF,EAAkBjB,UAAU,EAAE,IAGxD,EAAKnB,SAAS,CAAE8B,YAAaA,IAG7BF,YAAW,WACV,EAAK5B,SAAS,CAAEf,iBAAiB,MAChC,SAEFsD,OAAM,SAAAC,GACLC,QAAQC,IAAI,oBAAoBF,GAEhC,EAAKxC,SAAS,CAAEhB,gBAAgB,S,+BAKzB,IAAD,OAGR,OAAGe,KAAKnC,MAAMqB,iBAAmBc,KAAKnC,MAAMkE,YAE1C,kBAAC,IAAD,CAAUa,GAAI,CACXC,SAAU,mBACVC,KAAM9C,KAAKnC,MAAMkE,eAMrB,6BACC,yBAAKgB,UAAU,kBACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,eAGb/C,KAAKnC,MAAMmB,gBACZ,yBAAK+D,UAAU,0BACd,yBAAKA,UAAU,cAAa,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,8BAAW,gCAI1G,4BACC,wBAAIA,UAAU,cAAd,mBACA,wBAAIA,UAAU,wBAGd,wBAAIA,UAAU,oBAAd,gBACC,0BAAMA,UAAU,cAAhB,gBAED,wBAAIA,UAAU,mBACb,2BAAOC,KAAK,OACRC,UAAU,KACVC,SAAU,SAAC/D,GAAD,OAAO,EAAKgE,iBAAiBhE,OAG3Ca,KAAKnC,MAAMG,qBACZ,wBAAI+E,UAAU,iBAAd,uBAIA,wBAAIA,UAAU,oBAAd,gBACC,0BAAMA,UAAU,cAAhB,iBAED,wBAAIA,UAAU,mBACb,2BAAOC,KAAK,OACRE,SAAU,SAAC/D,GAAD,OAAO,EAAKiE,eAAejE,OAGzCa,KAAKnC,MAAMM,eACZ,wBAAI4E,UAAU,iBAAd,qBAIA,wBAAIA,UAAU,oBAAd,oBACC,0BAAMA,UAAU,cAAhB,YAED,wBAAIA,UAAU,2BACb,0BAAMA,UAAU,sBAAhB,UACA,2BAAOC,KAAK,OACRC,UAAU,IACV3D,MAAOU,KAAKnC,MAAMO,aAClB2E,UAAU,qBACVM,OAAQ,kBAAM,EAAKzB,0BACnBsB,SAAU,SAAC/D,GAAD,OAAO,EAAKmE,mBAAmBnE,MAG7C,0BAAM4D,UAAU,oBACf,0BAAMA,UAAU,sBAAhB,SACA,2BAAOC,KAAK,OACRC,UAAU,IACVF,UAAU,qBACVzD,MAAOU,KAAKnC,MAAMS,YAClB+E,OAAQ,kBAAM,EAAKzB,0BACnBsB,SAAU,SAAC/D,GAAD,OAAO,EAAKoE,kBAAkBpE,QAM7Ca,KAAKnC,MAAMY,oBACZ,wBAAIsE,UAAU,iBAAd,uBAIA,wBAAIA,UAAU,oBAAd,gBACC,0BAAMA,UAAU,cAAhB,UAED,wBAAIA,UAAU,mBACb,2BAAOC,KAAK,OACRC,UAAU,IACVC,SAAU,SAAC/D,GAAD,OAAO,EAAKqE,mBAAmBrE,OAG7Ca,KAAKnC,MAAMe,iBACZ,wBAAImE,UAAU,iBAAd,yBAIA,wBAAIA,UAAU,oBAAd,YACA,wBAAIA,UAAU,mBACb,2BAAOC,KAAK,OACRC,UAAU,KACVC,SAAU,SAAC/D,GAAD,OAAO,EAAKsE,aAAatE,OAGvCa,KAAKnC,MAAMkB,WACZ,wBAAIgE,UAAU,iBAAd,wBAIA,wBAAIA,UAAU,sBACbW,QAAS,kBAAI,EAAKC,sBADnB,WAMC3D,KAAKnC,MAAMoB,gBACZ,wBAAI8D,UAAU,iBAAd,6C,GAtYWa,IAAMC,Y,OC+DVC,G,wDAjEd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAEDlG,MAAQ,CAAEiF,KAAMiB,EAAMjB,MAHT,E,qDAUlB,QAAgCkB,IAA7BhE,KAAK+D,MAAME,SAASnB,KACtB,OACA,kBAAC,IAAD,CAAUF,GAAI,MAIf,IAAMb,EAAc/B,KAAK+D,MAAME,SAASnB,KAExC,OACC,6BACC,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,aACd,yBAAKA,UAAU,wBAId,yBAAKA,UAAU,mBACf,0BAAMA,UAAU,kBAAhB,uBAEA,yBAAKA,UAAU,aACd,0BAAMA,UAAU,eAAhB,mBACA,0BAAMA,UAAU,eAAehB,EAAYQ,cAG5C,yBAAKQ,UAAU,aACd,0BAAMA,UAAU,eAAhB,gBACA,0BAAMA,UAAU,eAAehB,EAAYjE,mBAG5C,yBAAKiF,UAAU,aACd,0BAAMA,UAAU,eAAhB,gBACA,0BAAMA,UAAU,eAAehB,EAAYC,aAG5C,yBAAKe,UAAU,aACd,0BAAMA,UAAU,eAAhB,oBACA,0BAAMA,UAAU,eAAehB,EAAYE,iBAG5C,yBAAKc,UAAU,2BACd,0BAAMA,UAAU,eAAhB,WACA,0BAAMA,UAAU,eAAhB,IAAgChB,EAAYlD,SAI7C,kBAAC,IAAD,CAAM+D,GAAI,IAAKG,UAAU,kBAAzB,mB,GAxDqBa,IAAMC,YCK5BK,EACL,kBAAC,IAAD,CAAQC,SAAS,KAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAS,IAAKC,UAAa1G,IACxC,kBAAC,IAAD,CAAOwG,OAAK,EAACC,KAAS,mBAA4BC,UAAaR,IAC/D,kBAAC,IAAD,CAAQO,KAAS,GAA6BC,UAAa1G,MAOhE2G,IAASC,OAAON,EAASO,SAASC,eAAe,W","file":"static/js/main.0b324efd.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nexport default axios.create({ \r\n\tbaseURL: 'https://test-fe-e5dfa.firebaseio.com/'\r\n})","import   React          from 'react';\r\nimport   API            from '../firebase/api';\r\nimport { Redirect }     from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport '../css/Main.css';\r\n\r\n\r\n\r\nclass Main extends React.Component {\r\n\t\r\n\tstate = { \r\n\t\t\t\tcreditCardNumber      : '',\r\n\t\t\t\tcreditCardNumberValid : false,\r\n\t\t\t\tcreditCardNumberErr   : false,\r\n\r\n\t\t\t\tcardHolder            : '',\r\n\t\t\t\tcardHolderValid       : false,\r\n\t\t\t\tcardHolderErr         : false,\r\n\r\n\t\t\t\texpMonthDate          : '',\r\n\t\t\t\texpMonthDateValid     : false,\r\n\r\n\t\t\t\texpYearDate           : '',\r\n\t\t\t\texpYearDateValid      : false,\r\n\r\n\t\t\t\texpireDateValid       : false,\r\n\t\t\t\texpireDateValidErr    : false,\r\n\r\n\t\t\t\tsecurityCode          : '',\r\n\t\t\t\tsecurityCodeValid     : true,\r\n\t\t\t\tsecurityCodeErr       : false,\r\n\t\t\t\t\r\n\t\t\t\tamount                : '',\r\n\t\t\t\tamountValid           : false,\r\n\t\t\t\tamountErr             : false,\r\n\r\n\t\t\t\tloadingPayment        : false,\t\r\n\t\t\t\tpaymentRefused        : false,\t\t\r\n\t\t\t\tpaymentApproved       : false,\r\n\t\t\t}\r\n\r\n\r\n\r\n\r\n\r\n\thandleCardNumber(e) {\r\n\t\tlet cardNumber            = e.target.value,\r\n        \t// Check cardNumber characters\r\n      \t\tcheckCardNumber       = cardNumber.split('').every(x => x.match(/[0-9]+/g)),\r\n        \t// Check cardNumber length to be equal with 16\r\n      \t\tcheckCardNumberLength = cardNumber.length === 16,\r\n        \t// Check for blank spaces\r\n      \t\tcheckWhiteSpaces \t  = cardNumber.trim().length === cardNumber.length;\r\n\r\n\r\n\t    if(checkCardNumber && checkCardNumberLength && checkWhiteSpaces) {\r\n\t        this.setState({creditCardNumber: cardNumber, creditCardNumberValid: true})\r\n\t      } else if(cardNumber.length === 0) {\r\n\t      // If input is empty, reset value input\r\n\t        this.setState({creditCardNumber: '', creditCardNumberValid: false})\r\n\t      } else {\r\n\t        this.setState({creditCardNumber: cardNumber, creditCardNumberValid: false})\r\n\t    }\r\n\t}\r\n\r\n\thandleCardName(e) {\r\n\t\t let cardName           = e.target.value,\r\n           \t// Check cardName characters\r\n         \tcheckCardName       =  cardName.split('').every(x => x.match(/[a-zA-Z ]+/g)),\r\n           \t// Check for input not to be only blank spaces\r\n         \tonlyBlankSpaces     =  cardName.split('').every(x => x.match(/[ ]+/g)),\r\n           \t// Check cardName length to be at least 2\r\n         \tcheckCardNameLength = cardName.length >= 4;\r\n\r\n\r\n\t\t    if(checkCardName && checkCardNameLength && !onlyBlankSpaces) {\r\n\t\t        this.setState({ cardHolder: cardName, cardHolderValid: true })\r\n\t\t    } else if(cardName.length === 0) {\r\n\t\t      // If input is empty, reset value input\r\n\t\t        this.setState({ cardHolder: '', cardHolderValid: false })\r\n\t\t    } else {\r\n\t\t        this.setState({ cardHolder: cardName, cardHolderValid: false })\r\n\t\t    }\r\n\t}\r\n\t\r\n\thandleExpMonthDate(e) {\r\n\t\t\tlet expMonth        = e.target.value,\r\n        \t// Check expMonth characters\r\n      \t\tcheckExpMonth       = expMonth.split('').every(x => x.match(/[0-9]+/g)),\r\n        \t// Check expMonth length to be equal with 2\r\n      \t\tcheckExpMonthLength = expMonth.length === 2,\r\n        \t// Check for blank spaces\r\n      \t\tcheckWhiteSpaces    = expMonth.trim().length === expMonth.length;\r\n\r\n\r\n\t\t    if(checkExpMonth && checkExpMonthLength && checkWhiteSpaces) {\r\n\t\t        this.setState({expMonthDate: expMonth, expMonthDateValid: true})\r\n\t\t      } else if(expMonth.length === 0) {\r\n\t\t      // If input is empty, reset value input\r\n\t\t        this.setState({expMonthDate: '', expYearDate: '', expMonthDateValid: false})\r\n\t\t      } else {\r\n\t\t        this.setState({expMonthDate: expMonth, expMonthDateValid: false})\r\n\t\t    }\r\n \r\n\t}\r\n\r\n\thandleExpYearDate(e) {\r\n\t\tlet expYear             = e.target.value,\r\n        \t// Check expYear characters\r\n      \t\tcheckExpYear        = expYear.split('').every(x => x.match(/[0-9]+/g)),\r\n        \t// Check expYear length to be equal with 2\r\n      \t\tcheckExpYearLength  = expYear.length === 2,\r\n        \t// Check for blank spaces\r\n      \t\tcheckWhiteSpaces    = expYear.trim().length === expYear.length;\r\n\r\n\r\n\t\t    if(checkExpYear && checkExpYearLength && checkWhiteSpaces) {\r\n\t\t        this.setState({expYearDate: expYear, expYearDateValid: true})\r\n\t\t      } else if(expYear.length === 0) {\r\n\t\t      // If input is empty, reset value input\r\n\t\t        this.setState({expYearDate: '', expMonthDate: '', expYearDateValid: false})\r\n\t\t      } else {\r\n\t\t        this.setState({expYearDate: expYear, expYearDateValid: false})\r\n\t\t    }\r\n\t}\r\n\r\n\tvalidateExpirationData() {\r\n\t\t\r\n\t\t// If typed date month and year are valid, proceed\r\n\t\tif(this.state.expMonthDateValid && this.state.expYearDateValid) {\r\n\r\n\t\t\t let  expMonthDate = parseFloat(this.state.expMonthDate),\r\n\t\t\t \t  expYearDate  = parseFloat(this.state.expYearDate),\r\n\t\t\t      date         = new Date(),\r\n\t\t\t      getMonth     = date.getMonth() + 1,\r\n\t\t\t      getYear      = date.getFullYear(),\r\n\t\t\t      getEndOfYear = parseFloat(getYear.toString().substring(2,getYear.length)); // Get last two numbers from year value\r\n\r\n\t\t\t// Add missing zero to day value\r\n\t\t  \t\tfunction addZero(i) {\r\n\t\t\t\t  if (i < 10) {\r\n\t\t\t\t    i = \"0\" + i;\r\n\t\t\t\t  }\r\n\t\t\t\t  return i;\r\n\t\t\t\t}\r\n\t\t\t\t// Pass to function to add missing zero from day number\r\n\t\t\t\tlet thisMonth = addZero(getMonth);\r\n\r\n\t\t\t// If current year is equal with typed year and month is equal or lower than current month, return error\r\n\t\t\tif(expYearDate === getEndOfYear && thisMonth >= expMonthDate) {\r\n\t\t\t\tthis.setState({ expireDateValid: false })\r\n\t\t\t} else {\r\n\t\t\t \t// If year is equal or higher than 20 and expiration month <= 12, proceed\r\n\t\t\t\tif(expYearDate >= 20 && expMonthDate > 0 && expMonthDate <= 12) {\r\n\t\t\t\t\tthis.setState({ expireDateValid: true })\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.setState({ expireDateValid: false })\r\n\t\t\t\t}\r\n \t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thandleSecurityCode(e) {\r\n\t\tlet secCode            = e.target.value,\r\n        \t// Check secCode characters to be only digits\r\n      \t\tcheckSecCode       = secCode.split('').every(x => x.match(/[0-9]+/g)),\r\n        \t// Check secCode length to be equal with 3\r\n      \t\tcheckSecCodeLength = secCode.length === 3,\r\n        \t// Check for blank spaces\r\n      \t\tcheckWhiteSpaces   = secCode.trim().length === secCode.length;\r\n\r\n\r\n\t\t    if(checkSecCode && checkSecCodeLength && checkWhiteSpaces) {\r\n\t\t        this.setState({securityCode: secCode, securityCodeValid: true, securityCodeErr: false})\r\n\t\t      } else if(secCode.length === 0) {\r\n\t\t      // If input is empty, reset value input\r\n\t\t        this.setState({securityCode: '', securityCodeValid: true})\r\n\t\t      } else {\r\n\t\t        this.setState({securityCode: secCode, securityCodeValid: false})\r\n\t\t    }\r\n\t}\r\n\r\n\thandleAmount(e) {\r\n\t\tlet amount            = e.target.value,\r\n        \t// Check amount characters\r\n      \t\tcheckAmount       = amount.split('').every(x => x.match(/[0-9]+/g)),\r\n        \t// Check amount length to be equal with 16\r\n      \t\tcheckAmountLength = amount.length > 0,\r\n        \t// Check for blank spaces\r\n      \t\tcheckWhiteSpaces  = amount.trim().length === amount.length;\r\n\r\n\t\t    if(checkAmount && checkAmountLength && checkWhiteSpaces) {\r\n\t\t        this.setState({amount: amount, amountValid: true})\r\n\t\t      } else if(amount.length === 0) {\r\n\t\t      // If input is empty, reset value input\r\n\t\t        this.setState({amount: '', amountValid: false})\r\n\t\t      } else {\r\n\t\t        this.setState({amount: amount, amountValid: false})\r\n\t\t    }\r\n\t}\r\n\r\n \tvalidateInputsBtn() {\r\n\r\n \t\t// Call to check expiration data format\r\n \t\tthis.validateExpirationData();\r\n \t\t// Display loading effect\r\n \t\tthis.setState({ loadingPayment: true })\r\n \t\t// Leave time to update, and check inputs for validation\r\n \t\tsetTimeout(() => {\r\n \t\t\t// First, clear all error messages\r\n \t\t\tthis.setState({ loadingPayment: false, creditCardNumberErr: false, cardHolderErr: false, expireDateValidErr: false, securityCodeErr: false, amountErr: false })\r\n \t\t\t\r\n \t\t\t// Check for validation\r\n \t\t\tif(this.state.creditCardNumberValid) {\r\n \t\t\t\tif(this.state.cardHolderValid) {\r\n \t\t\t\t\tif(this.state.expireDateValid) {\r\n \t\t\t\t\t\tif(this.state.securityCodeValid) {\r\n \t\t\t\t\t\t\tif(this.state.amountValid) {\r\n \t\t\t\t\t\t\t\t// If all inputs are valid, proceed with payment\r\n \t\t\t\t\t\t\t\tthis.processPayment();\r\n \t\t\t\t\t\t\t} else {\r\n \t\t\t\t\t\t\t\tthis.setState({ amountErr: true })\r\n \t\t\t\t\t\t\t}\r\n \t\t\t\t\t\t} else {\r\n \t\t\t\t\t\t\tthis.setState({ securityCodeErr: true })\r\n \t\t\t\t\t\t}\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\tthis.setState({ expireDateValidErr: true })\r\n \t\t\t\t\t}\r\n \t\t\t\t} else {\r\n \t\t\t\t\tthis.setState({ cardHolderErr: true })\r\n \t\t\t\t}\r\n \t\t\t} else {\r\n \t\t\t\tthis.setState({ creditCardNumberErr: true })\r\n \t\t\t}\r\n \t\t},1200);\r\n\r\n \t}\r\n\r\n \tprocessPayment() {\r\n\r\n \t\t// Prepare DTO\r\n \t\tlet paymentInfo = {\r\n \t\t\tcreditCardNumber : this.state.creditCardNumber,\r\n\t\t\tcardholder       : this.state.cardHolder,\r\n\t\t\texpirationDate   : this.state.expMonthDate+'/'+this.state.expYearDate,\r\n\t\t\tsecurityCode     : this.state.securityCode,\r\n\t\t\tamount           : this.state.amount\r\n \t\t}\r\n\r\n\r\n \t\t// Send POST request to database\r\n\t\tAPI.post('/paymentInfo.json', paymentInfo)\r\n\t\t.then(() => {\r\n\r\n \t\t\t// Get random number to be used as 'transaction number'\r\n\t\t\tlet transactionNumber = uuidv4();\r\n\r\n\t\t\t// Get only first 13 numbers\r\n\t\t\tpaymentInfo.transNumber = transactionNumber.substring(0,13);\r\n\r\n\t\t\t// Set state payment info data and proceed with the DTO to database\r\n\t\t\tthis.setState({ paymentInfo: paymentInfo })\r\n\r\n\t\t\t// Set paymentApproved to true to display info payment\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.setState({ paymentApproved: true })\t\t\t\t\t\r\n\t\t\t},1500);\r\n\t\t})\r\n\t\t.catch(err => { \r\n\t\t\t\tconsole.log('Payment refused: '+err);\r\n\t\t\t\t// Display error message\r\n\t\t\t\tthis.setState({ paymentRefused: true })\r\n\t\t\t})\r\n \t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\t// If paymentApproved is true and paymentInfo !== null, proceed to payment details page\r\n\t\tif(this.state.paymentApproved && this.state.paymentInfo) {\r\n\t\t\treturn (\r\n\t\t\t\t<Redirect to={{\r\n\t\t\t    pathname: '/paymentapproved',\r\n\t\t\t    data: this.state.paymentInfo\r\n\t\t\t\t}} />\r\n\t\t\t)\r\n\t\t} \r\n\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='wrap_container'>\r\n\t\t\t\t\t<div className='container'>\r\n\t\t\t\t\t\t<div className='inputs_form'>\r\n\r\n\t\t\t\t\t\t\t{/* Loading payment effect */}\r\n\t\t\t\t\t\t\t{this.state.loadingPayment && (\r\n\t\t\t\t\t\t\t<div className='inputs_form_loadingeff'>\r\n\t\t\t\t\t\t\t\t<div className='lds-roller'><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t<ul>\t\r\n\t\t\t\t\t\t\t\t<li className='wr_top_txt'>Payment details</li>\r\n\t\t\t\t\t\t\t\t<li className='wr_top_acc_cardsimg'></li>\r\n\r\n\t\t\t\t\t\t\t\t{/* Card number */}\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_title'>Card number *\r\n\t\t\t\t\t\t\t\t\t<span className='wit_subtit'>(16 digits)</span>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_form'>\r\n\t\t\t\t\t\t\t\t\t<input type='text'\r\n\t\t\t\t\t\t\t\t\t\t   maxLength='16'\r\n\t\t\t\t\t\t\t\t\t\t   onChange={(e) => this.handleCardNumber(e)}>\r\n\t\t\t\t\t\t\t\t    </input>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t{this.state.creditCardNumberErr && (\r\n\t\t\t\t\t\t\t\t<li className='input_err_msg'>Invalid card number</li>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{/* Card holder */}\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_title'>Card holder *\r\n\t\t\t\t\t\t\t\t\t<span className='wit_subtit'>(John Smith)</span>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_form'>\r\n\t\t\t\t\t\t\t\t\t<input type='text'\r\n\t\t\t\t\t\t\t\t\t\t   onChange={(e) => this.handleCardName(e)}>\r\n\t\t\t\t\t\t\t\t\t</input>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t{this.state.cardHolderErr && (\r\n\t\t\t\t\t\t\t\t<li className='input_err_msg'>Invalid card name</li>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{/* Expiration date - MM/YY */}\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_title'>Expiration date *\r\n\t\t\t\t\t\t\t\t\t<span className='wit_subtit'>(MM/YY)</span>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_form_expdate'>\r\n\t\t\t\t\t\t\t\t\t<span className='winpt_expdyear_txt'>Month:</span>\r\n\t\t\t\t\t\t\t\t\t<input type='text'\r\n\t\t\t\t\t\t\t\t\t\t   maxLength='2'\r\n\t\t\t\t\t\t\t\t\t\t   value={this.state.expMonthDate}\r\n\t\t\t\t\t\t\t\t\t\t   className='winp_expdate_month'\r\n\t\t\t\t\t\t\t\t\t\t   onBlur={() => this.validateExpirationData()}\r\n\t\t\t\t\t\t\t\t\t\t   onChange={(e) => this.handleExpMonthDate(e)}>\r\n\t\t\t\t\t\t\t\t\t</input>\r\n\r\n\t\t\t\t\t\t\t\t\t<span className='wrap_expdate_inp'>\r\n\t\t\t\t\t\t\t\t\t\t<span className='winpt_expdyear_txt'>Year:</span>\r\n\t\t\t\t\t\t\t\t\t\t<input type='text'\r\n\t\t\t\t\t\t\t\t\t\t\t   maxLength='2'\r\n\t\t\t\t\t\t\t\t\t\t\t   className='winpt_expdate_year'\r\n\t\t\t\t\t\t\t\t\t\t\t   value={this.state.expYearDate}\r\n\t\t\t\t\t\t\t\t\t\t\t   onBlur={() => this.validateExpirationData()}\r\n\t\t\t\t\t\t\t\t\t\t\t   onChange={(e) => this.handleExpYearDate(e)}>\r\n\t\t\t\t\t\t\t\t\t\t</input>\r\n\t\t\t\t\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t\t\t\t</li>\r\n\r\n\t\t\t\t\t\t\t\t{this.state.expireDateValidErr && (\r\n\t\t\t\t\t\t\t\t<li className='input_err_msg'>Invalid date format</li>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{/* Security code */}\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_title'>Security code\r\n\t\t\t\t\t\t\t\t\t<span className='wit_subtit'>(CVV)</span>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_form'>\r\n\t\t\t\t\t\t\t\t\t<input type='text'\r\n\t\t\t\t\t\t\t\t\t\t   maxLength='3'\r\n\t\t\t\t\t\t\t\t\t\t   onChange={(e) => this.handleSecurityCode(e)}>\r\n\t\t\t\t\t\t\t\t\t</input>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t{this.state.securityCodeErr && (\r\n\t\t\t\t\t\t\t\t<li className='input_err_msg'>Invalid security code</li>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{/* Amount value */}\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_title'>Amount *</li>\r\n\t\t\t\t\t\t\t\t<li className='wrap_input_form'>\r\n\t\t\t\t\t\t\t\t\t<input type='text'\r\n\t\t\t\t\t\t\t\t\t\t   maxLength='50'\r\n\t\t\t\t\t\t\t\t\t\t   onChange={(e) => this.handleAmount(e)}>\r\n\t\t\t\t\t\t\t\t\t</input>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t{this.state.amountErr && (\r\n\t\t\t\t\t\t\t\t<li className='input_err_msg'>Invalid amount value</li>\r\n\t\t\t\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t\t\t\t{/* Proceed button */}\r\n\t\t\t\t\t\t\t\t<li className='validate_inputs_btn'\r\n\t\t\t\t\t\t\t\t\tonClick={()=>this.validateInputsBtn()}>\r\n\t\t\t\t\t\t\t\t\tProceed\r\n\t\t\t\t\t\t\t\t</li>\r\n\r\n\t\t\t\t\t\t\t\t{/* If payment was denied, display error message */}\r\n\t\t\t\t\t\t\t\t{this.state.paymentRefused && (\r\n\t\t\t\t\t\t\t\t<li className='input_err_msg'>Something went wrong. Try again.</li>\r\n\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t</ul>\t\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t \r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Main;\r\n","import   React   \t\t  from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport '../css/paymentDetails.css';\r\n\r\n\r\nclass PaymentDetails extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = { data: props.data };\r\n \r\n\t}\r\n\r\n\r\n\trender() {\r\n\t  \t// If props data is undefined, redirect to main page\r\n\t\tif(this.props.location.data === undefined) {\r\n\t\t\treturn (\r\n\t\t\t<Redirect to={'/'}/>\r\n\t\t\t)\r\n\t\t} \r\n\r\n\t\tconst paymentInfo = this.props.location.data;\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='wrap_container'>\r\n\t\t\t\t\t\t<div className='container'>\r\n\t\t\t\t\t\t\t<div className='wrap_payment_details'>\r\n\r\n\t\t\t\t\t\t\t\t{/* Payment details */}\r\n\r\n\t\t\t\t\t\t\t\t<div className='paysc_succ_img'></div>\r\n\t\t\t\t\t\t\t\t<span className='paysc_succ_txt'>Payment successful!</span>\r\n\r\n\t\t\t\t\t\t\t\t<div className='paysc_row'>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_title'>Transaction id:</span>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_value'>{paymentInfo.transNumber}</span> \r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className='paysc_row'>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_title'>Card number:</span>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_value'>{paymentInfo.creditCardNumber}</span> \r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className='paysc_row'>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_title'>Card holder:</span>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_value'>{paymentInfo.cardholder}</span> \r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className='paysc_row'>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_title'>Expiration date:</span>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_value'>{paymentInfo.expirationDate}</span> \r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t<div className='paysc_row paysc_row_amo'>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_title'>Amount:</span>\r\n\t\t\t\t\t\t\t\t\t<span className='paysc_value'>${paymentInfo.amount}</span> \r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t{/* Back to main page button */}\r\n\t\t\t\t\t\t\t\t<Link to={'/'} className='paysc_back_btn'>Go back</Link>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PaymentDetails;\r\n","import   React    \t        from 'react';\nimport   ReactDOM \t        from 'react-dom';\nimport   Main     \t        from './components/Main';\nimport   PaymentDetails     from './components/PaymentDetails';\nimport { BrowserRouter as \n\t\t Router, \n\t\t Route, \n\t\t Switch } \t\t\tfrom 'react-router-dom'; \n \n\n const routing = (\n\t\t<Router basename='/'>\n\t\t\t<Switch>\n\t\t\t\t <Route exact path  = {'/'} component = {Main}/>\n\t\t\t\t <Route exact path  = {'/paymentapproved'}         component = {PaymentDetails}/>\n\t\t\t\t <Route  path \t\t= ''                           component = {Main}/>\n\t\t\t</Switch>\n\t\t</Router>\n )\n\n\n\nReactDOM.render(routing, document.getElementById('root'));"],"sourceRoot":""}